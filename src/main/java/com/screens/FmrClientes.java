/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.screens;

import com.clases.Clientes;
import com.clases.Sexo;
import com.clases.TipoDocumento;
import com.dao.ClientesJpaController;
import com.dao.SexoJpaController;
import com.dao.TipoDocumentoJpaController;
import java.awt.Image;
import java.sql.Connection;
import java.sql.DriverManager;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import static javax.swing.WindowConstants.DISPOSE_ON_CLOSE;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JRSaveContributor;
import net.sf.jasperreports.view.JRViewer;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author david
 */
public class FmrClientes extends javax.swing.JFrame {

    //Se crea el Entity manager factory
    EntityManagerFactory emf = Persistence.createEntityManagerFactory("DB");
    NombreEmpleado N = new NombreEmpleado();
    TipoDocumentoJpaController daoTipoDocumento = new TipoDocumentoJpaController();
    SexoJpaController daoSexo = new SexoJpaController();
    ClientesJpaController daoClientes = new ClientesJpaController();
    static Logs log = new Logs();
    Clientes objCliente = new Clientes();
    
    public FmrClientes() {
        initComponents();
        this.setLocationRelativeTo(null);
        Image icon = new ImageIcon(getClass().getResource("/imagenes/IconoMicrocosmos.png")).getImage();
        setIconImage(icon);
        listaTipoDocumento();
        listaSexo();
        ActualizarCliente();
        Txt_Activo.setVisible(false);
        Btn_Editar.setEnabled(false);
        Btn_Activar_Desactivar.setEnabled(false);
        RestringirPermisos(ValidarAgregar(N.id),ValidarEditar(N.id),ValidarDesactivar(N.id),ValidarImprimir(N.id),ValidarBuscar(N.id));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Tbl_Clientes = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        Txt_IdCliente = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        Txt_NombreCliente = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        Txt_ApellidoCliente = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        Txt_TelefonoCliente = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        Txt_CorreoCliente = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        Txt_DocumentoCliente = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        Txt_DireccionCliente = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        Txt_Activo = new javax.swing.JTextField();
        Buscar = new javax.swing.JButton();
        Btn_Imprimir = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        Btn_Añadir = new javax.swing.JButton();
        Btn_Editar = new javax.swing.JButton();
        Btn_Activar_Desactivar = new javax.swing.JButton();
        Btn_Limpiar = new javax.swing.JButton();
        Btn_Regresar = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Clientes - Microcosmos");
        setResizable(false);

        Tbl_Clientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Nombre", "Apellido", "Teléfono", "Dirección", "Correo", "TipoDocumento", "Documento"
            }
        ));
        Tbl_Clientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Tbl_ClientesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Tbl_Clientes);
        if (Tbl_Clientes.getColumnModel().getColumnCount() > 0) {
            Tbl_Clientes.getColumnModel().getColumn(0).setResizable(false);
            Tbl_Clientes.getColumnModel().getColumn(1).setResizable(false);
            Tbl_Clientes.getColumnModel().getColumn(2).setResizable(false);
            Tbl_Clientes.getColumnModel().getColumn(3).setResizable(false);
            Tbl_Clientes.getColumnModel().getColumn(4).setResizable(false);
            Tbl_Clientes.getColumnModel().getColumn(5).setResizable(false);
            Tbl_Clientes.getColumnModel().getColumn(6).setResizable(false);
            Tbl_Clientes.getColumnModel().getColumn(7).setResizable(false);
        }

        jPanel1.setBackground(new java.awt.Color(49, 49, 49));
        jPanel1.setMaximumSize(new java.awt.Dimension(800, 100));
        jPanel1.setMinimumSize(new java.awt.Dimension(800, 100));
        jPanel1.setPreferredSize(new java.awt.Dimension(800, 100));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/LogoMicrocosmos.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(60, 63, 65));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.setMaximumSize(new java.awt.Dimension(180, 20));
        jPanel2.setMinimumSize(new java.awt.Dimension(180, 20));
        jPanel2.setPreferredSize(new java.awt.Dimension(800, 230));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Ingresar Datos");
        jLabel5.setMaximumSize(new java.awt.Dimension(299, 41));
        jLabel5.setPreferredSize(new java.awt.Dimension(299, 41));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("ID Cliente");
        jLabel2.setMaximumSize(new java.awt.Dimension(120, 20));
        jLabel2.setMinimumSize(new java.awt.Dimension(120, 20));
        jLabel2.setPreferredSize(new java.awt.Dimension(120, 20));

        Txt_IdCliente.setEditable(false);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Nombre Cliente");
        jLabel3.setMaximumSize(new java.awt.Dimension(120, 20));
        jLabel3.setMinimumSize(new java.awt.Dimension(120, 20));
        jLabel3.setPreferredSize(new java.awt.Dimension(120, 20));

        Txt_NombreCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Txt_NombreClienteActionPerformed(evt);
            }
        });
        Txt_NombreCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                Txt_NombreClienteKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Txt_NombreClienteKeyTyped(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Apellido Cliente");
        jLabel4.setMaximumSize(new java.awt.Dimension(120, 20));
        jLabel4.setMinimumSize(new java.awt.Dimension(120, 20));
        jLabel4.setPreferredSize(new java.awt.Dimension(120, 20));

        Txt_ApellidoCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Txt_ApellidoClienteKeyTyped(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Teléfono Cliente");
        jLabel6.setMaximumSize(new java.awt.Dimension(120, 20));
        jLabel6.setMinimumSize(new java.awt.Dimension(120, 20));
        jLabel6.setPreferredSize(new java.awt.Dimension(120, 20));

        Txt_TelefonoCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Txt_TelefonoClienteKeyTyped(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Tipo Documento");
        jLabel7.setMaximumSize(new java.awt.Dimension(120, 20));
        jLabel7.setMinimumSize(new java.awt.Dimension(120, 20));
        jLabel7.setPreferredSize(new java.awt.Dimension(120, 20));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("E-mail Cliente");
        jLabel8.setMaximumSize(new java.awt.Dimension(120, 20));
        jLabel8.setMinimumSize(new java.awt.Dimension(120, 20));
        jLabel8.setPreferredSize(new java.awt.Dimension(120, 20));

        Txt_CorreoCliente.setMaximumSize(new java.awt.Dimension(180, 20));
        Txt_CorreoCliente.setMinimumSize(new java.awt.Dimension(180, 20));
        Txt_CorreoCliente.setPreferredSize(new java.awt.Dimension(180, 20));
        Txt_CorreoCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Txt_CorreoClienteKeyTyped(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione" }));
        jComboBox1.setMaximumSize(new java.awt.Dimension(180, 20));
        jComboBox1.setMinimumSize(new java.awt.Dimension(180, 20));
        jComboBox1.setPreferredSize(new java.awt.Dimension(180, 20));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Documento");
        jLabel9.setMaximumSize(new java.awt.Dimension(120, 20));
        jLabel9.setMinimumSize(new java.awt.Dimension(120, 20));
        jLabel9.setPreferredSize(new java.awt.Dimension(120, 20));

        Txt_DocumentoCliente.setMaximumSize(new java.awt.Dimension(180, 20));
        Txt_DocumentoCliente.setMinimumSize(new java.awt.Dimension(180, 20));
        Txt_DocumentoCliente.setPreferredSize(new java.awt.Dimension(180, 20));
        Txt_DocumentoCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Txt_DocumentoClienteActionPerformed(evt);
            }
        });
        Txt_DocumentoCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Txt_DocumentoClienteKeyTyped(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("Dirección Cliente");
        jLabel10.setMaximumSize(new java.awt.Dimension(120, 20));
        jLabel10.setMinimumSize(new java.awt.Dimension(120, 20));
        jLabel10.setPreferredSize(new java.awt.Dimension(120, 20));

        Txt_DireccionCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Txt_DireccionClienteKeyTyped(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Sexo");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione" }));

        Txt_Activo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Txt_ActivoActionPerformed(evt);
            }
        });

        Buscar.setText("Buscar");
        Buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuscarActionPerformed(evt);
            }
        });

        Btn_Imprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/impresoraAzul.png"))); // NOI18N
        Btn_Imprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_ImprimirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(176, 176, 176)
                .addComponent(Btn_Imprimir))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Txt_IdCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Txt_NombreCliente, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                            .addComponent(Txt_ApellidoCliente, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                            .addComponent(Txt_TelefonoCliente))))
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(Buscar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(Txt_CorreoCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Txt_DocumentoCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Txt_DireccionCliente))
                    .addComponent(Txt_Activo, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Btn_Imprimir))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Txt_DireccionCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Txt_IdCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Txt_CorreoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Txt_NombreCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Buscar)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Txt_ApellidoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Txt_DocumentoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Txt_TelefonoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(Txt_Activo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40))
        );

        jPanel3.setBackground(new java.awt.Color(60, 63, 65));
        jPanel3.setMaximumSize(new java.awt.Dimension(800, 130));
        jPanel3.setMinimumSize(new java.awt.Dimension(800, 130));
        jPanel3.setPreferredSize(new java.awt.Dimension(800, 130));

        Btn_Añadir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/añadir.png"))); // NOI18N
        Btn_Añadir.setText("Añadir");
        Btn_Añadir.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 255)));
        Btn_Añadir.setFocusPainted(false);
        Btn_Añadir.setMaximumSize(new java.awt.Dimension(120, 50));
        Btn_Añadir.setMinimumSize(new java.awt.Dimension(120, 50));
        Btn_Añadir.setPreferredSize(new java.awt.Dimension(120, 50));
        Btn_Añadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_AñadirActionPerformed(evt);
            }
        });

        Btn_Editar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Actualizar2.png"))); // NOI18N
        Btn_Editar.setText("Actualizar");
        Btn_Editar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 255)));
        Btn_Editar.setFocusPainted(false);
        Btn_Editar.setMaximumSize(new java.awt.Dimension(120, 50));
        Btn_Editar.setMinimumSize(new java.awt.Dimension(120, 50));
        Btn_Editar.setPreferredSize(new java.awt.Dimension(120, 50));
        Btn_Editar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_EditarActionPerformed(evt);
            }
        });

        Btn_Activar_Desactivar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/AD.png"))); // NOI18N
        Btn_Activar_Desactivar.setText("Desactivar");
        Btn_Activar_Desactivar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 255)));
        Btn_Activar_Desactivar.setFocusPainted(false);
        Btn_Activar_Desactivar.setMaximumSize(new java.awt.Dimension(120, 50));
        Btn_Activar_Desactivar.setMinimumSize(new java.awt.Dimension(120, 50));
        Btn_Activar_Desactivar.setPreferredSize(new java.awt.Dimension(120, 50));
        Btn_Activar_Desactivar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_Activar_DesactivarActionPerformed(evt);
            }
        });

        Btn_Limpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/limpiar.png"))); // NOI18N
        Btn_Limpiar.setText("Limpiar");
        Btn_Limpiar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 255)));
        Btn_Limpiar.setFocusPainted(false);
        Btn_Limpiar.setMaximumSize(new java.awt.Dimension(120, 50));
        Btn_Limpiar.setMinimumSize(new java.awt.Dimension(120, 50));
        Btn_Limpiar.setPreferredSize(new java.awt.Dimension(120, 50));
        Btn_Limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_LimpiarActionPerformed(evt);
            }
        });

        Btn_Regresar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/return.png"))); // NOI18N
        Btn_Regresar.setText("Regresar");
        Btn_Regresar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 255)));
        Btn_Regresar.setFocusPainted(false);
        Btn_Regresar.setMaximumSize(new java.awt.Dimension(120, 50));
        Btn_Regresar.setMinimumSize(new java.awt.Dimension(120, 50));
        Btn_Regresar.setPreferredSize(new java.awt.Dimension(120, 50));
        Btn_Regresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_RegresarActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Acciones");
        jLabel11.setMaximumSize(new java.awt.Dimension(265, 25));
        jLabel11.setMinimumSize(new java.awt.Dimension(265, 25));
        jLabel11.setPreferredSize(new java.awt.Dimension(265, 25));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Btn_Añadir, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(Btn_Editar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(Btn_Activar_Desactivar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addComponent(Btn_Limpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(Btn_Regresar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(260, 260, 260))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Btn_Editar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Btn_Activar_Desactivar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Btn_Limpiar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Btn_Regresar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Btn_Añadir, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Txt_NombreClienteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Txt_NombreClienteKeyTyped

        char c = evt.getKeyChar();
        String Texto = Txt_NombreCliente.getText();

        if((c < 'A' || c > 'Z') && (c < 'a' || c > 'z')){

            if(c == 'á' || c == 'é' || c == 'í' || c == 'ó' || c == 'ú'){
            }
            else{
            evt.consume();
            }
        }
              
        if (Txt_NombreCliente.getText().length() >= 20){
        
        evt.consume();
        
        }
    
         if((evt.getKeyChar() == 22)){
        
            Txt_NombreCliente.setText(Texto.substring(0, 20));
                    
        }
          
        if (Txt_NombreCliente.getText().length() == 1){

            char mayuscula = Texto.charAt(0);
            Texto = Character.toUpperCase(mayuscula)+ Texto.substring(1,Texto.length());
            Txt_NombreCliente.setText(Texto);

        }
    }//GEN-LAST:event_Txt_NombreClienteKeyTyped

    private void Btn_RegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_RegresarActionPerformed
        
        FmrMenú M = new FmrMenú();
        M.setVisible(true);
        this.dispose();
        
    }//GEN-LAST:event_Btn_RegresarActionPerformed

    private void Btn_LimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_LimpiarActionPerformed

       try{        
        LimpiarCliente();
        ActualizarCliente();
        }catch(Exception ex){
        
        log.Logs("PantallaClientes", "Error al limpiar: " + ex);
          
        }
        
    }//GEN-LAST:event_Btn_LimpiarActionPerformed

    private void Txt_NombreClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Txt_NombreClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Txt_NombreClienteActionPerformed

    private void Tbl_ClientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Tbl_ClientesMouseClicked
     
        int fila =  Tbl_Clientes.getSelectedRow();
        
        if(ValidarEditar(N.id) == true || ValidarDesactivar(N.id) == true){
        if(fila == -1){
        
            JOptionPane.showMessageDialog(this, "Debe seleccionar una Fila");
        
        }else{
        Btn_Añadir.setEnabled(false);
        if(ValidarEditar(N.id) == true && ValidarDesactivar(N.id) == false){
        Btn_Editar.setEnabled(true);
        Btn_Activar_Desactivar.setEnabled(false);
        }
        if(ValidarEditar(N.id) == false && ValidarDesactivar(N.id) == true){
        Btn_Editar.setEnabled(false);
        Btn_Activar_Desactivar.setEnabled(true);
        }
        if(ValidarEditar(N.id) == true && ValidarDesactivar(N.id) == true){
        Btn_Editar.setEnabled(true);
        Btn_Activar_Desactivar.setEnabled(true);
        }
        String Id = Tbl_Clientes.getValueAt(fila, 0).toString();
        String Nombre = Tbl_Clientes.getValueAt(fila, 1).toString();
        String Apellido = Tbl_Clientes.getValueAt(fila, 2).toString();
        String Telefono = Tbl_Clientes.getValueAt(fila, 3).toString();
        String Direccion = Tbl_Clientes.getValueAt(fila, 4).toString();
        String Correo = Tbl_Clientes.getValueAt(fila, 5).toString();
        String TipoDocumento = Tbl_Clientes.getValueAt(fila, 6).toString();
        String Documento = Tbl_Clientes.getValueAt(fila, 7).toString();
        String Sexo = Tbl_Clientes.getValueAt(fila, 8).toString();
        String Activo = Tbl_Clientes.getValueAt(fila, 9).toString();
        
        

        Txt_IdCliente.setText(Id);
        Txt_NombreCliente.setText(Nombre);
        Txt_ApellidoCliente.setText(Apellido);
        Txt_TelefonoCliente.setText(Telefono);
        jComboBox2.setSelectedItem(Sexo);
        Txt_DireccionCliente.setText(Direccion);
        Txt_CorreoCliente.setText(Correo);
        jComboBox1.setSelectedItem(TipoDocumento);
        Txt_DocumentoCliente.setText(Documento);
        Txt_Activo.setText(Activo);
        
        if(Activo == "Activado"){
        Btn_Activar_Desactivar.setText("Desactivar");
        }else{
        
             Btn_Activar_Desactivar.setText("Activar");
        
        }
        }
        }
        
    }//GEN-LAST:event_Tbl_ClientesMouseClicked

    private void Btn_Activar_DesactivarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_Activar_DesactivarActionPerformed
 
         int fila = Tbl_Clientes.getSelectedRow();

        if(fila != -1){

            try{
            Activar_Desactivar();
            } catch(Exception ex){
        
        log.Logs("PantallaClientes", "Error al desactivar: " + ex);
          
        }

        }else{

            JOptionPane.showMessageDialog(this, "Debe seleccionar el elemento a Activar o Desactivar en la Fila");

        }
        
    }//GEN-LAST:event_Btn_Activar_DesactivarActionPerformed

    private void Btn_EditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_EditarActionPerformed
         
        int fila = Tbl_Clientes.getSelectedRow();
        if(fila == -1){

            JOptionPane.showMessageDialog(this, "Debe seleccionar el elemento a actualizar en la Fila");

        }else{

            try{
            EditarCliente();
            LimpiarCliente();
            } catch(Exception ex){
        
        log.Logs("PantallaClientes", "Error al editar: " + ex);
          
        }
            
        }        
        
    }//GEN-LAST:event_Btn_EditarActionPerformed

    private void Btn_AñadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_AñadirActionPerformed

        try{
        LlenarCliente(); 
        } catch(Exception ex){
        
        log.Logs("PantallaClientes", "Error al llenar: " + ex);
          
        }
        
    }//GEN-LAST:event_Btn_AñadirActionPerformed

    private void Txt_ApellidoClienteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Txt_ApellidoClienteKeyTyped
         
        char c = evt.getKeyChar();
        String Texto = Txt_ApellidoCliente.getText();

        if((c < 'A' || c > 'Z') && (c < 'a' || c > 'z')){

            if(c == 'á' || c == 'é' || c == 'í' || c == 'ó' || c == 'ú'){
            }
            else{
            evt.consume();
            }
        }
        
        if (Txt_ApellidoCliente.getText().length() >= 20){
        
        evt.consume();
        
        }
    
         if((evt.getKeyChar() == 22)){
        
            Txt_ApellidoCliente.setText(Texto.substring(0, 20));
                    
        }
          
        if (Txt_ApellidoCliente.getText().length() == 1){

            char mayuscula = Texto.charAt(0);
            Texto = Character.toUpperCase(mayuscula)+ Texto.substring(1,Texto.length());
            Txt_ApellidoCliente.setText(Texto);

        }
        
    }//GEN-LAST:event_Txt_ApellidoClienteKeyTyped

    private void Txt_TelefonoClienteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Txt_TelefonoClienteKeyTyped
          
                
        char c = evt.getKeyChar();
        String Texto = Txt_TelefonoCliente.getText();
       
        if(c < '0' || c > '9') {
        
            //consume no valida los datos
            evt.consume();
             
        
        }
        
        if (Txt_TelefonoCliente.getText().length() == 0 && (c == '0' || c == '4' || c == '5' || c == '6' || c == '1') ){
       
        evt.consume();
        JOptionPane.showMessageDialog(this, "El número de teléfono debe de comenzar con 2, 3, 7, 8 ó 9","Error",JOptionPane.ERROR_MESSAGE);
        
        }
        
        
        if (Txt_TelefonoCliente.getText().length() >= 8){
        
        evt.consume();
        
        }
        
        if((evt.getKeyChar() == 22)){
        
            Txt_TelefonoCliente.setText(Texto.substring(0, 8));
                    
        }
        
    }//GEN-LAST:event_Txt_TelefonoClienteKeyTyped

    private void Txt_DireccionClienteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Txt_DireccionClienteKeyTyped
         
        char c = evt.getKeyChar();
        String Texto = Txt_DireccionCliente.getText();
        
          if (Txt_DireccionCliente.getText().length() >= 125){
        
        evt.consume();
        
        }
        
        if((evt.getKeyChar() == 22)){
        
            Txt_DireccionCliente.setText(Texto.substring(0, 125));
                    
        }
        
         if (Txt_DireccionCliente.getText().length() == 1){

            char mayuscula = Texto.charAt(0);
            Texto = Character.toUpperCase(mayuscula)+ Texto.substring(1,Texto.length());
           Txt_DireccionCliente.setText(Texto);

        }
        
    }//GEN-LAST:event_Txt_DireccionClienteKeyTyped

    private void Txt_CorreoClienteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Txt_CorreoClienteKeyTyped
        
        char c = evt.getKeyChar();
        String Texto = Txt_CorreoCliente.getText();
        
          if (Txt_CorreoCliente.getText().length() >= 45){
        
        evt.consume();
        
        }
        
        if((evt.getKeyChar() == 22)){
        
            Txt_CorreoCliente.setText(Texto.substring(0, 45));
                    
        }        
        
    }//GEN-LAST:event_Txt_CorreoClienteKeyTyped

    private void Txt_DocumentoClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Txt_DocumentoClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Txt_DocumentoClienteActionPerformed

    private void Txt_DocumentoClienteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Txt_DocumentoClienteKeyTyped
            
        char c = evt.getKeyChar();
        String Texto = Txt_DocumentoCliente.getText();
        
         if((c < 'A' || c > 'Z') && (c < 'a' || c > 'z')&&(c < '0' || c > '9')){
        
            evt.consume();
        
        }
        
          if (Txt_DocumentoCliente.getText().length() >= 20){
        
            evt.consume();
        
        }
        
        if((evt.getKeyChar() == 22)){
        
            Txt_DocumentoCliente.setText(Texto.substring(0, 20));
                    
        }
    }//GEN-LAST:event_Txt_DocumentoClienteKeyTyped

    private void Txt_ActivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Txt_ActivoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Txt_ActivoActionPerformed

    private void Txt_NombreClienteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Txt_NombreClienteKeyReleased
         
        
        
    }//GEN-LAST:event_Txt_NombreClienteKeyReleased

    private void BuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuscarActionPerformed

        try{
            
        ActualizarCliente2(Txt_NombreCliente.getText());
        
        }catch(Exception ex){
        
        log.Logs("PantallaClientes", "Error al buscar: " + ex);
          
        }
        
    }//GEN-LAST:event_BuscarActionPerformed

    private void Btn_ImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_ImprimirActionPerformed

        try{
        GenerarReporte();
        }catch(Exception ex){
        
        log.Logs("PantallaClientes", "Error al imprimir reporte: " + ex);
          
        }
    }//GEN-LAST:event_Btn_ImprimirActionPerformed

    
    private void LimpiarCliente(){
        
        try{
        if(ValidarAgregar(N.id) == true){
        Btn_Añadir.setEnabled(true);
        }
        Btn_Editar.setEnabled(false);
        Btn_Activar_Desactivar.setEnabled(false);
        Txt_IdCliente.setText("");
        Txt_NombreCliente.setText("");
        Txt_ApellidoCliente.setText("");
        Txt_TelefonoCliente.setText("");
        jComboBox2.setSelectedIndex(0);
        Txt_DireccionCliente.setText("");
        Txt_CorreoCliente.setText("");
        jComboBox1.setSelectedIndex(0);
        Txt_DocumentoCliente.setText("");
        
        }catch(Exception ex){
        
        log.Logs("PantallaClientes", "Error al limpiar: " + ex);
          
        }
        
       }
    
    
      public void listaTipoDocumento(){
  
      jComboBox1.removeAllItems();
  
      List<TipoDocumento> tipoDocumento = this.daoTipoDocumento.findTipoDocumentoEntities();
  
             jComboBox1.addItem("Seleccione");
      
         for(TipoDocumento TipoDocumento : tipoDocumento){
             
             if(TipoDocumento.isActivoTipoDocumento() == true){
             String lista = TipoDocumento.getNombreTipoDocumento();
             jComboBox1.addItem(lista);
             
             }
                                
                    };
  }  
    
       public void listaSexo(){
  
         jComboBox2.removeAllItems();
  
         List<Sexo> sexo = this.daoSexo.findSexoEntities();
  
         jComboBox2.addItem("Seleccione");
      
         for(Sexo Sexo : sexo){
             
             String lista = Sexo.getNombreSexo();
             jComboBox2.addItem(lista);
                                
                    }
  }  
    
            
            private void ActualizarCliente(){
       
            DefaultTableModel t = new DefaultTableModel();
            Tbl_Clientes.setModel(t);
            t.addColumn("Id");
            t.addColumn("Nombre");
            t.addColumn("Apellido");
            t.addColumn("Telefono");
            t.addColumn("Dirección");
            t.addColumn("Correo");
            t.addColumn("Tipo Documento");
            t.addColumn("Documento");
            t.addColumn("Sexo");
            t.addColumn("Estado");
        
            List<Clientes> clientes = this.daoClientes.findClientesEntities();
        
            String s;
            for(Clientes Clientes : clientes){
                
                if(Clientes.isActivoCliente() == true){
                s = "Activado";
                }else{
                s = "Desactivado";
                }
                t.addRow(
                    new Object[]{
                        Clientes.getIdCliente(),
                        Clientes.getNombreCliente(),
                        Clientes.getApellidoCliente(),
                        Clientes.getTelefonoCliente(),
                        Clientes.getDireccionCliente(),
                        Clientes.getCorreoCliente(),
                        GetNombreTipoDocumento(Clientes.getIdTipoDocumento()),
                        Clientes.getDocumento(),
                        GetNombreSexo(Clientes.getIdSexo()),
                        s
                    });
            }
       
       
       }
            
                  
       private void LlenarCliente(){
        
        if(Txt_NombreCliente.getText().length() < 3){
        
        JOptionPane.showMessageDialog(this, "El nombre tiene que contener al menos 3 letras","Error",JOptionPane.ERROR_MESSAGE);
        
        }else if(ValidacionTresLetras(Txt_NombreCliente.getText())== true){
        
        JOptionPane.showMessageDialog(this, "El nombre del cliente no puede contener 3 letras seguidas","Error",JOptionPane.ERROR_MESSAGE);
        
        }else if(Txt_ApellidoCliente.getText().length() < 2){
        
        JOptionPane.showMessageDialog(this, "El apellido tiene que contener al menos 2 letras","Error",JOptionPane.ERROR_MESSAGE);
        
        }else if(ValidacionTresLetras(Txt_ApellidoCliente.getText())== true){
        
        JOptionPane.showMessageDialog(this, "El apellido del cliente no puede contener 3 letras seguidas","Error",JOptionPane.ERROR_MESSAGE);
        
        }else if(Txt_TelefonoCliente.getText().length() < 8){
        
        JOptionPane.showMessageDialog(this, "El Teléfono debe de contener de 8 a 10 números","Error",JOptionPane.ERROR_MESSAGE);
        
        }else if(String.valueOf(jComboBox2.getSelectedItem()) == "Seleccione"){
        
        JOptionPane.showMessageDialog(this, "Debe de seleccionar un sexo","Error",JOptionPane.ERROR_MESSAGE);
        
        }else if(Txt_DireccionCliente.getText().length() < 8){
        
        JOptionPane.showMessageDialog(this, "La Dirección debe de contener mínimo 8 letras","Error",JOptionPane.ERROR_MESSAGE);
        
        }else if(ValidacionMail(Txt_CorreoCliente.getText())== false){
        
        JOptionPane.showMessageDialog(this, "Formato de E-mail inválido, el formato es: nombredeusuario@nombrededominio.extensión","Error",JOptionPane.ERROR_MESSAGE);
        
        }else if(String.valueOf(jComboBox1.getSelectedItem()) == "Seleccione"){
        
        JOptionPane.showMessageDialog(this, "Debe de seleccionar un Tipo de documento","Error",JOptionPane.ERROR_MESSAGE);
        
        }else if((String.valueOf(jComboBox1.getSelectedItem()).equalsIgnoreCase("dni") && ValidacionDNI(Txt_DocumentoCliente.getText()) == false ) || (String.valueOf(jComboBox1.getSelectedItem()).equalsIgnoreCase("identidad") && ValidacionDNI(Txt_DocumentoCliente.getText()) == false )){
        
        JOptionPane.showMessageDialog(this, "Formato de DNI inválido, el formato es: 0801199912080","Error",JOptionPane.ERROR_MESSAGE);
        
        }else if((String.valueOf(jComboBox1.getSelectedItem()).equalsIgnoreCase("rtn") && ValidacionRTN(Txt_DocumentoCliente.getText())== false)){
        
        JOptionPane.showMessageDialog(this, "Formato de RTN inválido, el formato es: 08011999120801","Error",JOptionPane.ERROR_MESSAGE);
        
        }else if(ValidacionDocumento(Txt_DocumentoCliente.getText()) == true){
        
        JOptionPane.showMessageDialog(this, "Documento ya ha sido registrado con otro Cliente","Error",JOptionPane.ERROR_MESSAGE);
        
        }else if(Txt_DocumentoCliente.getText().length() < 6){
        
        JOptionPane.showMessageDialog(this, "El documento debe de contener al menos 6 caracteres","Error",JOptionPane.ERROR_MESSAGE);
        
        }else{
            
            objCliente.setIdCliente(IdClientes());
            objCliente.setNombreCliente(Txt_NombreCliente.getText());
            objCliente.setApellidoCliente(Txt_ApellidoCliente.getText());
            objCliente.setTelefonoCliente(Long.parseLong(Txt_TelefonoCliente.getText()));
            objCliente.setDireccionCliente(Txt_DireccionCliente.getText());
            objCliente.setCorreoCliente(Txt_CorreoCliente.getText());
            objCliente.setIdTipoDocumento(GetIdTipoDocumento(String.valueOf(jComboBox1.getSelectedItem())));
            objCliente.setDocumento(Txt_DocumentoCliente.getText());
            objCliente.setIdSexo(GetIdSexo(String.valueOf(jComboBox2.getSelectedItem())));
            objCliente.setActivoCliente(true);
            
            
        try {
            daoClientes.create(objCliente);
            ActualizarCliente();
            LimpiarCliente();
            JOptionPane.showMessageDialog(this, "Se guardó correctamente");
        } catch(Exception ex){
        
        log.Logs("PantallaClientes", "Error al llenar: " + ex);
          
        }
       }   
       } 
            
            private void EditarCliente(){
            
            
        if(Txt_NombreCliente.getText().length() < 3){
        
        JOptionPane.showMessageDialog(this, "El nombre tiene que contener al menos 3 letras","Error",JOptionPane.ERROR_MESSAGE);
        
        }else if(Txt_IdCliente.getText().equals("6")){
        
        JOptionPane.showMessageDialog(this, "El Consumidor Final no puede ser editado","Error",JOptionPane.ERROR_MESSAGE);
        
        }else if(ValidacionTresLetras(Txt_NombreCliente.getText())== true){
        
        JOptionPane.showMessageDialog(this, "El nombre del cliente no puede contener 3 letras seguidas","Error",JOptionPane.ERROR_MESSAGE);
        
        }else if(Txt_ApellidoCliente.getText().length() < 2){
        
        JOptionPane.showMessageDialog(this, "El apellido tiene que contener al menos 2 letras","Error",JOptionPane.ERROR_MESSAGE);
        
        }else if(ValidacionTresLetras(Txt_ApellidoCliente.getText())== true){
        
        JOptionPane.showMessageDialog(this, "El apellido del cliente no puede contener 3 letras seguidas","Error",JOptionPane.ERROR_MESSAGE);
        
        }else if(Txt_TelefonoCliente.getText().length() < 8){
        
        JOptionPane.showMessageDialog(this, "El Teléfono debe de contener de 8 a 10 números","Error",JOptionPane.ERROR_MESSAGE);
        
        }else if(String.valueOf(jComboBox2.getSelectedItem()) == "Seleccione"){
        
        JOptionPane.showMessageDialog(this, "Debe de seleccionar un sexo","Error",JOptionPane.ERROR_MESSAGE);
        
        }else if(Txt_DireccionCliente.getText().length() < 8){
        
        JOptionPane.showMessageDialog(this, "La Dirección debe de contener mínimo 8 letras","Error",JOptionPane.ERROR_MESSAGE);
        
        }else if(ValidacionMail(Txt_CorreoCliente.getText())== false){
        
        JOptionPane.showMessageDialog(this, "Formato de E-mail inválido, el formato es: nombredeusuario@nombrededominio.extensión","Error",JOptionPane.ERROR_MESSAGE);
        
        }else if(String.valueOf(jComboBox1.getSelectedItem()) == "Seleccione"){
        
        JOptionPane.showMessageDialog(this, "Debe de seleccionar un Tipo de documento","Error",JOptionPane.ERROR_MESSAGE);
        
        }else if((String.valueOf(jComboBox1.getSelectedItem()).equalsIgnoreCase("dni") && ValidacionDNI(Txt_DocumentoCliente.getText()) == false ) || (String.valueOf(jComboBox1.getSelectedItem()).equalsIgnoreCase("identidad") && ValidacionDNI(Txt_DocumentoCliente.getText()) == false )){
        
        JOptionPane.showMessageDialog(this, "Formato de DNI inválido, el formato es: 0801199912080","Error",JOptionPane.ERROR_MESSAGE);
        
        }else if((String.valueOf(jComboBox1.getSelectedItem()).equalsIgnoreCase("rtn") && ValidacionRTN(Txt_DocumentoCliente.getText())== false)){
        
        JOptionPane.showMessageDialog(this, "Formato de RTN inválido, el formato es: 08011999120801","Error",JOptionPane.ERROR_MESSAGE);
        
        }else if(Txt_DocumentoCliente.getText().length() < 6){
        
        JOptionPane.showMessageDialog(this, "El documento debe de contener al menos 6 caracteres","Error",JOptionPane.ERROR_MESSAGE);
        
        }else{
            
            objCliente.setIdCliente(Integer.parseInt(Txt_IdCliente.getText()));
            objCliente.setNombreCliente(Txt_NombreCliente.getText());
            objCliente.setApellidoCliente(Txt_ApellidoCliente.getText());
            objCliente.setTelefonoCliente(Long.parseLong(Txt_TelefonoCliente.getText()));
            objCliente.setDireccionCliente(Txt_DireccionCliente.getText());
            objCliente.setCorreoCliente(Txt_CorreoCliente.getText());
            objCliente.setIdTipoDocumento(GetIdTipoDocumento(String.valueOf(jComboBox1.getSelectedItem())));
            objCliente.setDocumento(Txt_DocumentoCliente.getText());
            objCliente.setIdSexo(GetIdSexo(String.valueOf(jComboBox2.getSelectedItem())));
            
            String a = Txt_Activo.getText().toString();
            if(a.equals("Activado")){
            objCliente.setActivoCliente(true);
            }else{
            objCliente.setActivoCliente(false);
            }
            
        try {
            daoClientes.edit(objCliente);
            ActualizarCliente();
             JOptionPane.showMessageDialog(this, "Se actualizó correctamente");
        } catch(Exception ex){
        
        log.Logs("PantallaClientes", "Error al editar: " + ex);
          
        }
       }  
            
            }
            
            
      private void Activar_Desactivar(){
        
        int fila = Tbl_Clientes.getSelectedRow();
        
        String a = Txt_Activo.getText().toString();
       
        if(a.equals("Activado")){
        
            objCliente.setIdCliente(Integer.parseInt(Txt_IdCliente.getText()));
            objCliente.setNombreCliente(Tbl_Clientes.getValueAt(fila, 1).toString());
            objCliente.setApellidoCliente(Tbl_Clientes.getValueAt(fila, 2).toString());
            objCliente.setTelefonoCliente(Integer.parseInt(Tbl_Clientes.getValueAt(fila, 3).toString()));
            objCliente.setDireccionCliente(Tbl_Clientes.getValueAt(fila, 4).toString());
            objCliente.setCorreoCliente(Tbl_Clientes.getValueAt(fila, 5).toString());
            objCliente.setIdTipoDocumento(GetIdTipoDocumento(Tbl_Clientes.getValueAt(fila, 6).toString()));
            objCliente.setDocumento(Tbl_Clientes.getValueAt(fila, 7).toString());
            objCliente.setIdSexo(GetIdSexo(Tbl_Clientes.getValueAt(fila, 8).toString()));
            objCliente.setActivoCliente(false);
        
        
        try {
            daoClientes.edit(objCliente);
            ActualizarCliente();
            Btn_Activar_Desactivar.setText("Activar");
            JOptionPane.showMessageDialog(this, "Se desactivó correctamente");
        } catch(Exception ex){
        
        log.Logs("PantallaClientes", "Error al desactivar: " + ex);
          
        }
        
        
        LimpiarCliente();
        
        }else{
        
            objCliente.setIdCliente(Integer.parseInt(Txt_IdCliente.getText()));
            objCliente.setNombreCliente(Tbl_Clientes.getValueAt(fila, 1).toString());
            objCliente.setApellidoCliente(Tbl_Clientes.getValueAt(fila, 2).toString());
            objCliente.setTelefonoCliente(Integer.parseInt(Tbl_Clientes.getValueAt(fila, 3).toString()));
            objCliente.setDireccionCliente(Tbl_Clientes.getValueAt(fila, 4).toString());
            objCliente.setCorreoCliente(Tbl_Clientes.getValueAt(fila, 5).toString());
            objCliente.setIdTipoDocumento(GetIdTipoDocumento(Tbl_Clientes.getValueAt(fila, 6).toString()));
            objCliente.setDocumento(Tbl_Clientes.getValueAt(fila, 7).toString());
            objCliente.setIdSexo(GetIdSexo(Tbl_Clientes.getValueAt(fila, 8).toString()));
            objCliente.setActivoCliente(true);
        
        try {
            daoClientes.edit(objCliente);
            ActualizarCliente();
            Btn_Activar_Desactivar.setText("Desactivar");
            JOptionPane.showMessageDialog(this, "Se activó correctamente");
        } catch(Exception ex){
        
        log.Logs("PantallaClientes", "Error al activar: " + ex);
          
        }
        
        LimpiarCliente();
        
        }
        
        }
            
            
    
          private static String GetNombreTipoDocumento(int id){
        
              EntityManagerFactory emf = Persistence.createEntityManagerFactory("DB");
              EntityManager em = emf.createEntityManager();
              String select = "SELECT nombreTipoDocumento FROM TipoDocumento WHERE idTipoDocumento = '"+ id+ "'";
              Query query = em.createQuery(select);
    
              return query.getSingleResult().toString() ;
            
          }         
   
          private static int GetIdTipoDocumento(String Nombre){
        
              EntityManagerFactory emf = Persistence.createEntityManagerFactory("DB");
              EntityManager em = emf.createEntityManager();
              String select = "SELECT idTipoDocumento FROM TipoDocumento WHERE nombreTipoDocumento = '"+ Nombre+ "'";
              Query query = em.createQuery(select);
    
              return Integer.parseInt(query.getSingleResult().toString());
            
          }   
          
          
          private static String GetNombreSexo(int id){
        
              EntityManagerFactory emf = Persistence.createEntityManagerFactory("DB");
              EntityManager em = emf.createEntityManager();
              String select = "SELECT nombreSexo FROM Sexo WHERE idSexo = '"+ id+ "'";
              Query query = em.createQuery(select);
    
              return query.getSingleResult().toString() ;
            
          }   
          
          private static int GetIdSexo(String Nombre){
        
              EntityManagerFactory emf = Persistence.createEntityManagerFactory("DB");
              EntityManager em = emf.createEntityManager();
              String select = "SELECT idSexo FROM Sexo WHERE nombreSexo  = '"+ Nombre + "'";
              Query query = em.createQuery(select);
    
              return Integer.parseInt(query.getSingleResult().toString());
            
          }   
          
          
          public static boolean ValidacionMail(String Nombre){
        
          return Nombre.matches("[^@]+@[^@]+[a-zA-Z]{1,}\\.[a-zA-Z]{2,}");    
        
        }
          
        public static boolean ValidacionDNI(String DNI){
        
        return DNI.matches("^[0-1]{1}[0-9]{12}$");
                
        }
       
       public static boolean ValidacionRTN(String RTN){
        
        return RTN.matches("^[0-1]{1}[0-9]{13}$");
                
        }
          
       public static int IdClientes(){
        
             EntityManagerFactory emf = Persistence.createEntityManagerFactory("DB");
             EntityManager em = emf.createEntityManager();
      
             String select = "SELECT Max(idCliente)+1 FROM Clientes";
   
             Query query = em.createQuery(select);
        
             if(query.getSingleResult() == null){
             
             return 1;
             
             }else{
                 
             return Integer.parseInt(query.getSingleResult().toString());
             
             }
        
        }
       
       private static boolean ValidacionTresLetras(String Nombre){
        
            
        if(Nombre.length() >= 3){
        String Letra1 = Nombre.substring(0, 1);
        String Letra2 = Nombre.substring(1, 2);
        String Letra3 = Nombre.substring(2, 3);
        
        
        if(Letra1.equalsIgnoreCase(Letra2) && Letra2.equalsIgnoreCase(Letra3)){
        
        return true;
         
        }else{
        
        return false;
              
        }
        }else{
        
            return false;
        
        }
              
        } 
       
       
              private void ActualizarCliente2(String Nombres){
       
       DefaultTableModel t = new DefaultTableModel();
            Tbl_Clientes.setModel(t);
            t.addColumn("Id");
            t.addColumn("Nombre");
            t.addColumn("Apellido");
            t.addColumn("Telefono");
            t.addColumn("Dirección");
            t.addColumn("Correo");
            t.addColumn("Tipo Documento");
            t.addColumn("Documento");
            t.addColumn("Sexo");
            t.addColumn("Estado");
            
             List<Clientes> clientes  =  buscarPersonas(Nombres);
        
            String s;
            for(Clientes Clientes : clientes){
                
                if(Clientes.isActivoCliente() == true){
                s = "Activado";
                }else{
                s = "Desactivado";
                }
                t.addRow(
                    new Object[]{
                        Clientes.getIdCliente(),
                        Clientes.getNombreCliente(),
                        Clientes.getApellidoCliente(),
                        Clientes.getTelefonoCliente(),
                        Clientes.getDireccionCliente(),
                        Clientes.getCorreoCliente(),
                        GetNombreTipoDocumento(Clientes.getIdTipoDocumento()),
                        Clientes.getDocumento(),
                        GetNombreSexo(Clientes.getIdSexo()),
                        s
                    });
            }
             
       }
       
       public List<Clientes> buscarPersonas(String Nombres){
       
           Clientes c;
             
           EntityManagerFactory emf = Persistence.createEntityManagerFactory("DB");
           EntityManager em = emf.createEntityManager();
           String select = "SELECT c From Clientes c WHERE c.nombreCliente LIKE'"+ Nombres + "%'";
           Query query = em.createQuery(select);
           List<Clientes> lista = query.getResultList();
           return lista;
           
       }
       
       
       public static boolean ValidacionDocumento(String Documento){
       
         EntityManagerFactory emf = Persistence.createEntityManagerFactory("DB");
         EntityManager em = emf.createEntityManager();
      
             String select = "SELECT idCliente FROM Clientes WHERE documento  = '"+Documento+ "'";
   
             Query query = em.createQuery(select);
       
             if(query.getResultList().size() == 0){
             
             return false;
             
             }else{
             
             return true;
                
             }
             
        }
       
       private void GenerarReporte(){
       
        
             Connection con;
             
        try{
            
            Class.forName("com.mysql.jdbc.Driver");
            
        try{
        
        con = DriverManager.getConnection("jdbc:mysql://localhost:3306/Microcosmos?zeroDateTimeBehavior=convertToNull", "root", "12345");
        
        JasperReport report = (JasperReport) JRLoader.loadObject(getClass().getResource("/Reportes/ReporteClientes.jasper"));
        
        Map parametros = new HashMap<String, Object>();
        
        parametros.put("Empleado", N.getNombre());
   
        JasperPrint jprint = JasperFillManager.fillReport(report,parametros, con );
        JasperViewer view = new JasperViewer(jprint,false);
        view.setTitle("Reporte Articulos");
        Image icon = new ImageIcon(getClass().getResource("/imagenes/IconoMicrocosmos.png")).getImage();
        view.setIconImage(icon);
        

        final JRViewer viewer = new JRViewer(jprint);
            JRSaveContributor[] contrbs = viewer.getSaveContributors();

            for (JRSaveContributor saveContributor : contrbs)
            {
                if (!(saveContributor instanceof net.sf.jasperreports.view.save.JRSingleSheetXlsSaveContributor
                    || saveContributor instanceof net.sf.jasperreports.view.save.JRPdfSaveContributor))
            viewer.removeSaveContributor(saveContributor);
        }
        view.setContentPane(viewer);
        view.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        view.setVisible(true);
        

        view.show();

      
    }catch(Exception ex){
        
        log.Logs("PantallaClientes", "Error al imprimir reporte: " + ex);
          
        }
        }catch(Exception ex){
        
        log.Logs("PantallaClientes", "Error al imprimir reporte: " + ex);
          
        }
                
          }
          
       
     public void RestringirPermisos(boolean Agregar,boolean Editar,boolean Desactivar,boolean Imprimir,boolean buscar){
        
      
      if(Agregar == false){
       
        Btn_Añadir.setEnabled(false);
          
    }
      if(Editar == false){
          
        Btn_Editar.setEnabled(false);
                
    }
      if(Desactivar == false){

        Btn_Activar_Desactivar.setEnabled(false);
                
    }
      if(Imprimir == false){
          
        Btn_Imprimir.setEnabled(false);
                
    }
      if(buscar == false){
          
        Buscar.setEnabled(false);
                
    }
     
    }
          
          
    public boolean ValidarAgregar(int id){
        
        
    EntityManagerFactory emf = Persistence.createEntityManagerFactory("DB");
    EntityManager em = emf.createEntityManager();

    
    String select = "SELECT idPermisos FROM Permisos Where agregarClientes = true AND idUsuario IN (SELECT idUsuario FROM Usuarios WHERE idEmpleados = '"+ id+ "')";

    Query query = em.createQuery(select);
      
      if(query.getResultList().size() == 0){
       
          return false;
          
    }else{
        
          return true;
        
    }
     
    }
          
    public boolean ValidarEditar(int id){
        
        
    EntityManagerFactory emf = Persistence.createEntityManagerFactory("DB");
    EntityManager em = emf.createEntityManager();

    
    String select = "SELECT idPermisos FROM Permisos Where editarClientes = true AND idUsuario IN (SELECT idUsuario FROM Usuarios WHERE idEmpleados = '"+ id+ "')";

    Query query = em.createQuery(select);
      
      if(query.getResultList().size() == 0){
       
          return false;
          
    }else{
        
          return true;
        
    }
     
    }
    
    public boolean ValidarDesactivar(int id){
        
        
    EntityManagerFactory emf = Persistence.createEntityManagerFactory("DB");
    EntityManager em = emf.createEntityManager();

    
    String select = "SELECT idPermisos FROM Permisos Where desactivarClientes = true AND idUsuario IN (SELECT idUsuario FROM Usuarios WHERE idEmpleados = '"+ id+ "')";

    Query query = em.createQuery(select);
      
      if(query.getResultList().size() == 0){
       
          return false;
          
    }else{
        
          return true;
        
    }
     
    }
    
    public boolean ValidarImprimir(int id){
        
        
    EntityManagerFactory emf = Persistence.createEntityManagerFactory("DB");
    EntityManager em = emf.createEntityManager();

    
    String select = "SELECT idPermisos FROM Permisos Where imprimirClientes = true AND idUsuario IN (SELECT idUsuario FROM Usuarios WHERE idEmpleados = '"+ id+ "')";

    Query query = em.createQuery(select);
      
      if(query.getResultList().size() == 0){
       
          return false;
          
    }else{
        
          return true;
        
    }
     
    }
    
    public boolean ValidarBuscar(int id){
        
        
    EntityManagerFactory emf = Persistence.createEntityManagerFactory("DB");
    EntityManager em = emf.createEntityManager();

    
    String select = "SELECT idPermisos FROM Permisos Where buscarClientes = true AND idUsuario IN (SELECT idUsuario FROM Usuarios WHERE idEmpleados = '"+ id+ "')";

    Query query = em.createQuery(select);
      
      if(query.getResultList().size() == 0){
       
          return false;
          
    }else{
        
          return true;
        
    }
     
    }
       
       
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FmrClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FmrClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FmrClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FmrClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FmrClientes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Btn_Activar_Desactivar;
    private javax.swing.JButton Btn_Añadir;
    private javax.swing.JButton Btn_Editar;
    private javax.swing.JButton Btn_Imprimir;
    private javax.swing.JButton Btn_Limpiar;
    private javax.swing.JButton Btn_Regresar;
    private javax.swing.JButton Buscar;
    private javax.swing.JTable Tbl_Clientes;
    private javax.swing.JTextField Txt_Activo;
    private javax.swing.JTextField Txt_ApellidoCliente;
    private javax.swing.JTextField Txt_CorreoCliente;
    private javax.swing.JTextField Txt_DireccionCliente;
    private javax.swing.JTextField Txt_DocumentoCliente;
    private javax.swing.JTextField Txt_IdCliente;
    private javax.swing.JTextField Txt_NombreCliente;
    private javax.swing.JTextField Txt_TelefonoCliente;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
