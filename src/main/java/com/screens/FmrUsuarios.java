/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.screens;

import com.clases.Empleados;
import com.clases.Usuarios;
import com.dao.EmpleadosJpaController;
import com.dao.UsuariosJpaController;
import com.sun.org.apache.xerces.internal.impl.dv.util.Base64;
import java.awt.Image;
import java.security.MessageDigest;
import java.sql.Connection;
import java.sql.DriverManager;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import static javax.swing.WindowConstants.DISPOSE_ON_CLOSE;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JRSaveContributor;
import net.sf.jasperreports.view.JRViewer;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author david
 */
public class FmrUsuarios extends javax.swing.JFrame {

        EntityManagerFactory emf = Persistence.createEntityManagerFactory("DB");
        NombreEmpleado N = new NombreEmpleado();
        EmpleadosJpaController daoEmpleado = new EmpleadosJpaController();
        UsuariosJpaController daoUsuario = new UsuariosJpaController();
        static Logs log = new Logs();
        Empleados objEmpleado = new Empleados();
        Usuarios objUsuario = new Usuarios();
    
    
    public FmrUsuarios() {
        initComponents();
        this.setLocationRelativeTo(null);
        Txt_Activo.setVisible(false);
        Image icon = new ImageIcon(getClass().getResource("/imagenes/IconoMicrocosmos.png")).getImage();
        setIconImage(icon);
        ActualizarEmpleados();
        ActualizarUsuarios();   
        Btn_Editar.setEnabled(false);
        Btn_Activar_Desactivar.setEnabled(false);
        BotonAdmin();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        Txt_IdUsuario = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        Txt_NombreUsuario = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        Txt_IdEmpleado = new javax.swing.JTextField();
        Txt_Activo = new javax.swing.JTextField();
        Txt_Contraseña = new javax.swing.JPasswordField();
        Txt_ConfirmarContraseña = new javax.swing.JPasswordField();
        jLabel18 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Tbl_Empleados = new javax.swing.JTable();
        jLabel19 = new javax.swing.JLabel();
        Btn_Imprimir = new javax.swing.JButton();
        Btn_Regresar = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        Btn_Añadir = new javax.swing.JButton();
        Btn_Editar = new javax.swing.JButton();
        Btn_Activar_Desactivar = new javax.swing.JButton();
        Btn_Limpiar = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        Btn_Admin = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tbl_Usuarios = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Usuarios - Microcosmos");
        setMinimumSize(new java.awt.Dimension(800, 600));
        setResizable(false);
        setSize(new java.awt.Dimension(800, 600));

        jPanel2.setBackground(new java.awt.Color(49, 49, 49));
        jPanel2.setToolTipText("");

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/LogoMicrocosmos.png"))); // NOI18N

        jPanel3.setBackground(new java.awt.Color(60, 63, 65));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel3.setMaximumSize(new java.awt.Dimension(800, 230));
        jPanel3.setMinimumSize(new java.awt.Dimension(800, 230));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Ingresar Datos");
        jLabel5.setMaximumSize(new java.awt.Dimension(299, 41));
        jLabel5.setPreferredSize(new java.awt.Dimension(299, 41));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("ID Usuario");
        jLabel2.setMaximumSize(new java.awt.Dimension(120, 20));
        jLabel2.setMinimumSize(new java.awt.Dimension(120, 20));
        jLabel2.setPreferredSize(new java.awt.Dimension(120, 20));

        Txt_IdUsuario.setEditable(false);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Nombre Usuario");
        jLabel3.setMaximumSize(new java.awt.Dimension(120, 20));
        jLabel3.setMinimumSize(new java.awt.Dimension(120, 20));
        jLabel3.setPreferredSize(new java.awt.Dimension(120, 20));

        Txt_NombreUsuario.setEditable(false);
        Txt_NombreUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Txt_NombreUsuarioActionPerformed(evt);
            }
        });
        Txt_NombreUsuario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Txt_NombreUsuarioKeyTyped(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Contraseña");
        jLabel4.setMaximumSize(new java.awt.Dimension(120, 20));
        jLabel4.setMinimumSize(new java.awt.Dimension(120, 20));
        jLabel4.setPreferredSize(new java.awt.Dimension(120, 20));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Confirmar Contraseña");
        jLabel6.setMaximumSize(new java.awt.Dimension(120, 20));
        jLabel6.setMinimumSize(new java.awt.Dimension(120, 20));
        jLabel6.setPreferredSize(new java.awt.Dimension(120, 20));

        Txt_IdEmpleado.setEditable(false);

        Txt_Activo.setEditable(false);

        Txt_Contraseña.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Txt_ContraseñaKeyTyped(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel18.setText("ID Empleado");
        jLabel18.setMaximumSize(new java.awt.Dimension(120, 20));
        jLabel18.setMinimumSize(new java.awt.Dimension(120, 20));
        jLabel18.setPreferredSize(new java.awt.Dimension(120, 20));

        Tbl_Empleados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Nombre", "Apellido", "Teléfono", "Dirección", "Correo", "TipoDocumento", "Documento", "Fecha", "Género", "Área", "Usuario"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Tbl_Empleados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Tbl_EmpleadosMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(Tbl_Empleados);

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel19.setText("Empleados");
        jLabel19.setMaximumSize(new java.awt.Dimension(120, 20));
        jLabel19.setMinimumSize(new java.awt.Dimension(120, 20));
        jLabel19.setPreferredSize(new java.awt.Dimension(120, 20));

        Btn_Imprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/impresoraAzul.png"))); // NOI18N
        Btn_Imprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_ImprimirActionPerformed(evt);
            }
        });

        Btn_Regresar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/volver.png"))); // NOI18N
        Btn_Regresar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 255)));
        Btn_Regresar.setFocusPainted(false);
        Btn_Regresar.setMaximumSize(new java.awt.Dimension(120, 50));
        Btn_Regresar.setMinimumSize(new java.awt.Dimension(120, 50));
        Btn_Regresar.setPreferredSize(new java.awt.Dimension(120, 50));
        Btn_Regresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_RegresarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(Btn_Regresar, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Txt_Activo, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(92, 92, 92)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(188, 188, 188))
                    .addComponent(Btn_Imprimir, javax.swing.GroupLayout.Alignment.TRAILING)))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(Txt_Contraseña, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGap(18, 18, 18)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(Txt_ConfirmarContraseña, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(Txt_IdEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Txt_IdUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Txt_NombreUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 71, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Txt_Activo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Btn_Imprimir)
                                    .addComponent(Btn_Regresar, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Txt_IdUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Txt_NombreUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Txt_Contraseña, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Txt_ConfirmarContraseña, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Txt_IdEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel8.setBackground(new java.awt.Color(60, 63, 65));
        jPanel8.setMaximumSize(new java.awt.Dimension(800, 130));
        jPanel8.setMinimumSize(new java.awt.Dimension(800, 130));

        Btn_Añadir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/añadir.png"))); // NOI18N
        Btn_Añadir.setText("Añadir");
        Btn_Añadir.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 255)));
        Btn_Añadir.setFocusPainted(false);
        Btn_Añadir.setMaximumSize(new java.awt.Dimension(120, 50));
        Btn_Añadir.setMinimumSize(new java.awt.Dimension(120, 50));
        Btn_Añadir.setPreferredSize(new java.awt.Dimension(120, 50));
        Btn_Añadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_AñadirActionPerformed(evt);
            }
        });

        Btn_Editar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Actualizar2.png"))); // NOI18N
        Btn_Editar.setText("Actualizar");
        Btn_Editar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 255)));
        Btn_Editar.setFocusPainted(false);
        Btn_Editar.setMaximumSize(new java.awt.Dimension(120, 50));
        Btn_Editar.setMinimumSize(new java.awt.Dimension(120, 50));
        Btn_Editar.setPreferredSize(new java.awt.Dimension(120, 50));
        Btn_Editar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_EditarActionPerformed(evt);
            }
        });

        Btn_Activar_Desactivar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/AD.png"))); // NOI18N
        Btn_Activar_Desactivar.setText("Desactivar");
        Btn_Activar_Desactivar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 255)));
        Btn_Activar_Desactivar.setFocusPainted(false);
        Btn_Activar_Desactivar.setMaximumSize(new java.awt.Dimension(120, 50));
        Btn_Activar_Desactivar.setMinimumSize(new java.awt.Dimension(120, 50));
        Btn_Activar_Desactivar.setPreferredSize(new java.awt.Dimension(120, 50));
        Btn_Activar_Desactivar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_Activar_DesactivarActionPerformed(evt);
            }
        });

        Btn_Limpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/limpiar.png"))); // NOI18N
        Btn_Limpiar.setText("Limpiar");
        Btn_Limpiar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 255)));
        Btn_Limpiar.setFocusPainted(false);
        Btn_Limpiar.setMaximumSize(new java.awt.Dimension(120, 50));
        Btn_Limpiar.setMinimumSize(new java.awt.Dimension(120, 50));
        Btn_Limpiar.setPreferredSize(new java.awt.Dimension(120, 50));
        Btn_Limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_LimpiarActionPerformed(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel17.setText("Acciones");
        jLabel17.setMaximumSize(new java.awt.Dimension(265, 25));
        jLabel17.setMinimumSize(new java.awt.Dimension(265, 25));
        jLabel17.setPreferredSize(new java.awt.Dimension(265, 25));

        Btn_Admin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/administrador.png"))); // NOI18N
        Btn_Admin.setText("Administrador");
        Btn_Admin.setToolTipText("");
        Btn_Admin.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 255)));
        Btn_Admin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_AdminActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Btn_Añadir, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(Btn_Editar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Btn_Activar_Desactivar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addComponent(Btn_Limpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addComponent(Btn_Admin, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(267, 267, 267))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Btn_Editar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Btn_Limpiar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Btn_Activar_Desactivar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Btn_Admin, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(Btn_Añadir, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        Tbl_Usuarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Nombre", "Apellido", "Teléfono", "Dirección", "Correo", "TipoDocumento", "Documento", "Fecha", "Género", "Área", "Usuario"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, true, true, true, true, true, false, true, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Tbl_Usuarios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Tbl_UsuariosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Tbl_Usuarios);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel2.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Txt_NombreUsuarioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Txt_NombreUsuarioKeyTyped

        char c = evt.getKeyChar();
        String Texto = Txt_NombreUsuario.getText();

        if((c < 'A' || c > 'Z') && (c < 'a' || c > 'z')){

            evt.consume();

        }

        if (Txt_NombreUsuario.getText().length() == 1){

            char mayuscula = Texto.charAt(0);
            Texto = Character.toUpperCase(mayuscula)+ Texto.substring(1,Texto.length());
            Txt_NombreUsuario.setText(Texto);

        }
    }//GEN-LAST:event_Txt_NombreUsuarioKeyTyped

    private void Tbl_EmpleadosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Tbl_EmpleadosMouseClicked
         
           int fila =  Tbl_Empleados.getSelectedRow();
        if(fila == -1){
        
            JOptionPane.showMessageDialog(this, "Debe seleccionar una Fila");
                              
        }else{

        String Id = Tbl_Empleados.getValueAt(fila, 0).toString();      

        Txt_IdEmpleado.setText(Id);        
        
        }
      
    }//GEN-LAST:event_Tbl_EmpleadosMouseClicked

    private void Btn_RegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_RegresarActionPerformed
         
        FmrMenú M = new FmrMenú();
        M.setVisible(true);
        this.dispose();
        
    }//GEN-LAST:event_Btn_RegresarActionPerformed

    private void Btn_LimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_LimpiarActionPerformed

     try{        
        LimpiarUsuarios();
        }catch(Exception ex){
        
        log.Logs("PantallaUsuario", "Error al limpiar: " + ex);
          
        }  
        
    }//GEN-LAST:event_Btn_LimpiarActionPerformed

    private void Tbl_UsuariosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Tbl_UsuariosMouseClicked
        
        int fila =  Tbl_Usuarios.getSelectedRow();
        if(fila == -1){
        
            JOptionPane.showMessageDialog(this, "Debe seleccionar una Fila");
        
        }else{
            
        Btn_Añadir.setEnabled(false);
        Btn_Editar.setEnabled(true);
        Btn_Activar_Desactivar.setEnabled(true);
        String Id = Tbl_Usuarios.getValueAt(fila, 0).toString();
        String NombreUsuario = Tbl_Usuarios.getValueAt(fila, 1).toString();
        String Contraseña = Desencriptar(Tbl_Usuarios.getValueAt(fila, 2).toString());
        String IdEmpleado = ""+GetIdTipoEmpleado(Integer.parseInt(Id));
        String Activo = Tbl_Usuarios.getValueAt(fila, 5).toString();
        String admin = Tbl_Usuarios.getValueAt(fila, 6).toString();
        
        Txt_IdUsuario.setText(Id);
        Txt_NombreUsuario.setText(NombreUsuario);
        Txt_Contraseña.setText(Contraseña);
        Txt_ConfirmarContraseña.setText(Contraseña);
        Txt_IdEmpleado.setText(IdEmpleado);      
        Txt_Activo.setText(Activo);
        
        if(Activo == "Activado"){
            
        Btn_Activar_Desactivar.setText("Desactivar");
        
        }else{
        
        Btn_Activar_Desactivar.setText("Activar");
        
        }
        if(admin == "Sí"){
            
        Btn_Admin.setText("Estandar");
        
        }else{
        
        Btn_Admin.setText("Administrador");
        
        }
        }   
    }//GEN-LAST:event_Tbl_UsuariosMouseClicked

    private void Btn_Activar_DesactivarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_Activar_DesactivarActionPerformed
          
        int fila = Tbl_Usuarios.getSelectedRow();

        if(fila != -1){

            try{
            Activar_Desactivar();
          } catch(Exception ex){
        
        log.Logs("PantallaUsuario", "Error al desactivar: " + ex);
          
        }
        }else{

            JOptionPane.showMessageDialog(this, "Debe seleccionar el elemento a Activar o Desactivar en la Fila");

        }   
        
    }//GEN-LAST:event_Btn_Activar_DesactivarActionPerformed

    private void Txt_NombreUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Txt_NombreUsuarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Txt_NombreUsuarioActionPerformed

    private void Btn_EditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_EditarActionPerformed
         
        int fila = Tbl_Usuarios.getSelectedRow();
        if(fila == -1){

            JOptionPane.showMessageDialog(this, "Debe seleccionar el elemento a actualizar en la Fila");

        }else{

            try{
            EditarUsuario();
            LimpiarUsuarios();
            } catch(Exception ex){
        
        log.Logs("PantallaUsuario", "Error al editar: " + ex);
          
        }
        }         
                 
    }//GEN-LAST:event_Btn_EditarActionPerformed

    private void Btn_AñadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_AñadirActionPerformed
        try{
        LlenarCliente();
        } catch(Exception ex){
        
        log.Logs("PantallaUsuario", "Error al añadir: " + ex);
          
        }
        
    }//GEN-LAST:event_Btn_AñadirActionPerformed

    private void Txt_ContraseñaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Txt_ContraseñaKeyTyped
         
        char c = evt.getKeyChar();
        String Texto = Txt_Contraseña.getText();
        
        
        if((evt.getKeyChar() == 22)){
        
            Txt_Contraseña.setText(Texto.substring(0, 15));
                    
        }
        
        if (Txt_Contraseña.getText().length() >= 15){
        
        evt.consume();
        
        }
        
    }//GEN-LAST:event_Txt_ContraseñaKeyTyped

    private void Btn_ImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_ImprimirActionPerformed
        
        try{
        GenerarReporte();
        }catch(Exception ex){
        
        log.Logs("PantallaUsuario", "Error al generar reporte: " + ex);
          
        }
    }//GEN-LAST:event_Btn_ImprimirActionPerformed

    private void Btn_AdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_AdminActionPerformed
        
        int fila = Tbl_Usuarios.getSelectedRow();

        if(fila != -1){

            try{
                
            Admin();
            
          } catch(Exception ex){
        
        log.Logs("PantallaUsuario", "Error al dar o quitar permisos de administrador: " + ex);
          
        }
        }else{

            JOptionPane.showMessageDialog(this, "Debe seleccionar un elemento en la Fila");

        } 
    }//GEN-LAST:event_Btn_AdminActionPerformed

    
    
    
    
    private void LimpiarUsuarios(){
        
        try{
        Btn_Añadir.setEnabled(true);
        Btn_Editar.setEnabled(false);
        Btn_Activar_Desactivar.setEnabled(false);
        Txt_IdUsuario.setText("");
        Txt_NombreUsuario.setText("");
        Txt_Contraseña.setText("");
        Txt_ConfirmarContraseña.setText("");
        Txt_IdEmpleado.setText("");
        }catch(Exception ex){
        
        log.Logs("PantallaUsuario", "Error al limpiar: " + ex);
          
        }      
        
       }
    
    
    private void ActualizarUsuarios(){
       
            DefaultTableModel t = new DefaultTableModel();
            Tbl_Usuarios.setModel(t);
            t.addColumn("Id");
            t.addColumn("Nombre Usiario");
            t.addColumn("Contraseña");
            t.addColumn("Nombre Empleado");
            t.addColumn("Apellido Empleado");
            t.addColumn("Estado");
            t.addColumn("Admín");
        
            List<Usuarios> usuarios = buscarUsuario("");
        
            String s;
            String a;
            for(Usuarios  Usuarios : usuarios){
                
                if(Usuarios.isActivoUsuario() == true){
                s = "Activado";
                }else{
                s = "Desactivado";
                }
                if(Usuarios.isAdmin() == true){
                a = "Sí";
                }else{
                a = "No";
                }
                t.addRow(
                    new Object[]{
                        
                        Usuarios.getIdUsuario(),
                        Usuarios.getNombreUsuario(),
                        Usuarios.getContrasena(),
                        GetNombreEmpleado(Usuarios.getIdEmpleados()),
                        GetApellidoEmpleado(Usuarios.getIdEmpleados()),
                        s,
                        a
                            
                    });
            }   
       }
    
    
     public List<Usuarios> buscarUsuario(String Nombres){
       
           Usuarios u;
             
           EntityManagerFactory emf = Persistence.createEntityManagerFactory("DB");
           EntityManager em = emf.createEntityManager();
           String select = "SELECT u From Usuarios u WHERE u.nombreUsuario LIKE'"+ Nombres + "%'";
           Query query = em.createQuery(select);
           List<Usuarios> lista = query.getResultList();
           return lista;
           
       }
    
    private void Activar_Desactivar(){
        
        int fila = Tbl_Usuarios.getSelectedRow();
        
        String a = Txt_Activo.getText().toString();
        String s = Tbl_Usuarios.getValueAt(fila, 6).toString();
        if(Txt_IdEmpleado.getText().equals("6")){
        
        JOptionPane.showMessageDialog(this, "El Admin no puede ser Desactivado","Error",JOptionPane.ERROR_MESSAGE);
        
        }else if(a.equals("Activado")){
                
            objUsuario.setIdUsuario(Integer.parseInt(Txt_IdUsuario.getText()));
            objUsuario.setNombreUsuario(Tbl_Usuarios.getValueAt(fila, 1).toString());
            objUsuario.setContrasena(Tbl_Usuarios.getValueAt(fila, 2).toString());
            objUsuario.setNumeroDeIntentos(0);
            if(s.equals("Sí")){
            objUsuario.setAdmin(true);
            }else{
            objUsuario.setAdmin(false);
            }
            objUsuario.setIdEmpleados(Integer.parseInt(Txt_IdEmpleado.getText()));
            objUsuario.setActivoUsuario(false);
            
        
        try {
            daoUsuario.edit(objUsuario);
            Btn_Activar_Desactivar.setText("Activar");
            ActualizarEmpleados();
            ActualizarUsuarios();
            JOptionPane.showMessageDialog(this, "Se desactivó correctamente");
        } catch(Exception ex){
        
        log.Logs("PantallaUsuario", "Error al desactivar: " + ex);
          
        }
              
        LimpiarUsuarios(); 
        
        }else{
        
            objUsuario.setIdUsuario(Integer.parseInt(Txt_IdUsuario.getText()));
            objUsuario.setNombreUsuario(Tbl_Usuarios.getValueAt(fila, 1).toString());
            objUsuario.setContrasena(Tbl_Usuarios.getValueAt(fila, 2).toString());
            objUsuario.setNumeroDeIntentos(0);
            if(s.equals("Sí")){
            objUsuario.setAdmin(true);
            }else{
            objUsuario.setAdmin(false);
            }
            objUsuario.setIdEmpleados(Integer.parseInt(Txt_IdEmpleado.getText()));
            objUsuario.setActivoUsuario(true);
            
        try {
            daoUsuario.edit(objUsuario);
            Btn_Activar_Desactivar.setText("Desactivar");
            ActualizarEmpleados();
            ActualizarUsuarios();
            JOptionPane.showMessageDialog(this, "Se activó correctamente");
        } catch(Exception ex){
        
        log.Logs("PantallaUsuario", "Error al activar: " + ex);
          
        }
        
        LimpiarUsuarios();
        
        }
        
        }
    
        private void Admin(){
        
        int fila = Tbl_Usuarios.getSelectedRow();
        
        String a = Tbl_Usuarios.getValueAt(fila, 6).toString();
       
        if(Txt_IdEmpleado.getText().equals("6")){
        
        JOptionPane.showMessageDialog(this, "El Admin no puede ser Estandar","Error",JOptionPane.ERROR_MESSAGE);
        
        }else if(a.equals("Sí")){
                
       
        try {
            
            CambiarRol(Integer.parseInt(Txt_IdUsuario.getText()), false);
            Btn_Admin.setText("Estandar");
            ActualizarEmpleados();
            ActualizarUsuarios();
            JOptionPane.showMessageDialog(this, "El usuario ahora es estandar");
            
        } catch(Exception ex){
        
        log.Logs("PantallaUsuario", "Error al Cambiar Rol: " + ex);
          
        }
              
        LimpiarUsuarios(); 
        
        }else{
        
            objUsuario.setIdUsuario(Integer.parseInt(Txt_IdUsuario.getText()));
            objUsuario.setNombreUsuario(Tbl_Usuarios.getValueAt(fila, 1).toString());
            objUsuario.setContrasena(Tbl_Usuarios.getValueAt(fila, 2).toString());
            objUsuario.setNumeroDeIntentos(0);
            objUsuario.setAdmin(false);
            objUsuario.setIdEmpleados(Integer.parseInt(Txt_IdEmpleado.getText()));
            objUsuario.setActivoUsuario(true);
            
        try {
            
            CambiarRol(Integer.parseInt(Txt_IdUsuario.getText()), true);
            Btn_Admin.setText("Administrador");
            ActualizarEmpleados();
            ActualizarUsuarios();
            JOptionPane.showMessageDialog(this, "El usuario ahora es administrador");
        } catch(Exception ex){
        
        log.Logs("PantallaUsuario", "Error al Cambiar Rol: " + ex);
          
        }
        
        LimpiarUsuarios();
        
        }
        
        }
    
     private void EditarUsuario(){
            
            
        if(!(Txt_Contraseña.getText().equals(Txt_ConfirmarContraseña.getText()))){
        
        JOptionPane.showMessageDialog(this, "Contraseña y confirmación de contraseña no son iguales","Error",JOptionPane.ERROR_MESSAGE);
        
        }else if(Txt_Contraseña.getText().length() < 8){
        
        JOptionPane.showMessageDialog(this, "La contraseña tiene que contener al menos 8 letras","Error",JOptionPane.ERROR_MESSAGE);
        
        }else if(ValidacionContraseña(Txt_Contraseña.getText()) == false){
        
        JOptionPane.showMessageDialog(this, "La contraseña tiene que contener al menos un número, una minúscula y una mayúscula","Error",JOptionPane.ERROR_MESSAGE);
        
        }else if(Txt_IdEmpleado.getText().length() < 1){
        
        JOptionPane.showMessageDialog(this, "Debe de Seleccionar un empleado de la tabla","Error",JOptionPane.ERROR_MESSAGE);
        
        }else if(Txt_NombreUsuario.getText().equals("Admin")){
        
        JOptionPane.showMessageDialog(this, "El Admin no puede ser editado","Error",JOptionPane.ERROR_MESSAGE);
        
        }else{
            
            objUsuario.setIdUsuario(Integer.parseInt(Txt_IdUsuario.getText()));
            objUsuario.setNombreUsuario(Txt_NombreUsuario.getText());
            objUsuario.setContrasena(Encriptar(Txt_Contraseña.getText()));
            objUsuario.setNumeroDeIntentos(0);
            int fila = Tbl_Usuarios.getSelectedRow();
            String s = Tbl_Usuarios.getValueAt(fila, 6).toString();
            if(s.equals("Sí")){
            objUsuario.setAdmin(true);
            }else{
            objUsuario.setAdmin(false);
            }
            objUsuario.setIdEmpleados(Integer.parseInt(Txt_IdEmpleado.getText()));
            
            
            String a = Txt_Activo.getText().toString();
            
            if(a.equals("Activado")){
            objUsuario.setActivoUsuario(true);
            }else{
            objUsuario.setActivoUsuario(false);
            }
            
            
        try {
            daoUsuario.edit(objUsuario);
            ActualizarEmpleados();
            ActualizarUsuarios();
            JOptionPane.showMessageDialog(this, "Se actualizó correctamente");
        } catch(Exception ex){
        
        log.Logs("PantallaUsuario", "Error al editar: " + ex);
          
        }
       }  
            
            }
    
     
     
     private void LlenarCliente(){
        
        if(!(Txt_Contraseña.getText().equals(Txt_ConfirmarContraseña.getText()))){
        
        JOptionPane.showMessageDialog(this, "Contraseña y confirmación de contraseña no son iguales","Error",JOptionPane.ERROR_MESSAGE);
        
        }else if(Txt_Contraseña.getText().length() < 8){
        
        JOptionPane.showMessageDialog(this, "La contraseña tiene que contener al menos 8 letras","Error",JOptionPane.ERROR_MESSAGE);
        
        }else if(ValidacionContraseña(Txt_Contraseña.getText()) == false){
        
        JOptionPane.showMessageDialog(this, "La contraseña tiene que contener al menos un número, una minúscula y una mayúscula","Error",JOptionPane.ERROR_MESSAGE);
        
        }else if(Txt_IdEmpleado.getText().length() < 1){
        
        JOptionPane.showMessageDialog(this, "Debe de Seleccionar un empleado de la tabla","Error",JOptionPane.ERROR_MESSAGE);
        
        }else{
            
                      
            objUsuario.setIdUsuario(IdUsuarios());
            objUsuario.setNombreUsuario(GetNombreDeUsuario(GetNombreEmpleado(Integer.parseInt(Txt_IdEmpleado.getText())),GetApellidoEmpleado(Integer.parseInt(Txt_IdEmpleado.getText()))));
            objUsuario.setContrasena(Encriptar(Txt_Contraseña.getText()));
            objUsuario.setNumeroDeIntentos(0);
            objUsuario.setAdmin(false);
            objUsuario.setIdEmpleados(Integer.parseInt(Txt_IdEmpleado.getText()));
            objUsuario.setActivoUsuario(true);
            
            
        try {
            daoUsuario.create(objUsuario);
            ActualizarEmpleados();
            ActualizarUsuarios();
            LimpiarUsuarios();
            JOptionPane.showMessageDialog(this, "Se guardó correctamente");
        } catch(Exception ex){
        
        log.Logs("PantallaUsuario", "Error al añadir: " + ex);
          
        }
       }   
       } 
     
    
        private void ActualizarEmpleados(){
       
            DefaultTableModel t = new DefaultTableModel();
            Tbl_Empleados.setModel(t);
            t.addColumn("Id");
            t.addColumn("Nombre");
            t.addColumn("Apellido");
            t.addColumn("Tipo Documento");
            t.addColumn("Documento");
            
        
            List<Empleados> empleados = buscarEmpleado();
        
            
            for(Empleados Empleados : empleados){
                
                
                t.addRow(
                    new Object[]{
                        Empleados.getIdEmpleados(),
                        Empleados.getNombreEmpleado(),
                        Empleados.getApellidoEmpleado(),
                        GetNombreTipoDocumento(Empleados.getIdTipoDocumento()),
                        Empleados.getDocumento(),
                        
                    });
            }
       
       
       }
        
        
        public List<Empleados> buscarEmpleado(){
       
           Empleados p;
             
           EntityManagerFactory emf = Persistence.createEntityManagerFactory("DB");
           EntityManager em = emf.createEntityManager();
           String select = "SELECT e FROM Empleados e WHERE NOT EXISTS (SELECT u FROM Usuarios u WHERE e.idEmpleados = u.idEmpleados) AND e.activoEmpleado = true";
           Query query = em.createQuery(select);
           List<Empleados> lista = query.getResultList();
           return lista;
           
       }
        
        public static boolean ValidacionContraseña(String contraseña){
        
        return contraseña.matches("^.*(?=.{8,})(?=..*[0-9])(?=.*[a-z])(?=.*[A-Z]).*$");
                
        }
        
        
        public static String GetNombreDeUsuario(String Nombre, String Apellido){
       
         EntityManagerFactory emf = Persistence.createEntityManagerFactory("DB");
         EntityManager em = emf.createEntityManager();
      
             String NombreUsuario = Nombre+Apellido;
             String select = "SELECT idUsuario FROM Usuarios WHERE nombreUsuario  = '"+ NombreUsuario + "'";
   
             Query query = em.createQuery(select);
             
             
             String NombresRepetidos = NombreUsuario;
       
             if(query.getResultList().size() != 0){
             
                for(int i = 1; i != 0; i++){
                    
                select = "SELECT idUsuario FROM Usuarios WHERE nombreUsuario  = '"+ NombreUsuario + "'";
                query = em.createQuery(select);
                
                if(query.getResultList().size() != 0){
                
                NombreUsuario = NombresRepetidos;
                NombreUsuario = NombreUsuario+i;
                
                
                }else{
                
                i = -1;
                
                }
                 
                 }
    
             return NombreUsuario;
             
             }else{
             
             return NombreUsuario;
                
             }
             
        }
        
        
        public static int IdUsuarios(){
        
             EntityManagerFactory emf = Persistence.createEntityManagerFactory("DB");
             EntityManager em = emf.createEntityManager();
      
             String select = "SELECT Max(idUsuario)+1 FROM Usuarios";
   
             Query query = em.createQuery(select);
        
              if(query.getSingleResult() == null){
             
             return 1;
             
             }else{
                 
             return Integer.parseInt(query.getSingleResult().toString());
             
             }
        
        }
        
        
            public static SecretKeySpec CrearClave(String llave){
   
        try{
        byte[] cadena = llave.getBytes("UTF-8");
        MessageDigest md = MessageDigest.getInstance("SHA-1");
        cadena = md.digest(cadena);
        cadena = Arrays.copyOf(cadena, 16);
        SecretKeySpec secretKeySpec = new SecretKeySpec(cadena, "AES");
        return secretKeySpec;
        
        }catch(Exception e ){
        
            return null;         
        }
    }
    
    
    
    public static String Encriptar(String contraseña){
    
        try{
        SecretKeySpec secretKeySpec = CrearClave("Microcosmos");
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);
        
        byte[] cadena = contraseña.getBytes("UTF-8");
        byte[] encriptar = cipher.doFinal(cadena);
        String cadena_Encriptada = Base64.encode(encriptar);
        return cadena_Encriptada;
        
        
        }catch(Exception e){
        
            return "";
            
        }
    }
    
        public static String Desencriptar(String Desencriptar){
    
        try{
        SecretKeySpec secretKeySpec = CrearClave("Microcosmos");
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.DECRYPT_MODE, secretKeySpec);
        
        byte[] cadena = Base64.decode(Desencriptar);
        byte[] desencriptar = cipher.doFinal(cadena);
        String cadena_desencriptada = new String(desencriptar);
        return cadena_desencriptada;
        
        
        }catch(Exception e){
        
            return "";
            
        }
    }
    
        
         private static int GetIdTipoEmpleado(int IdUsuario){
        
              EntityManagerFactory emf = Persistence.createEntityManagerFactory("DB");
              EntityManager em = emf.createEntityManager();
              String select = "SELECT idEmpleados FROM Usuarios WHERE idUsuario = '"+ IdUsuario+ "'";
              Query query = em.createQuery(select);
    
              return Integer.parseInt(query.getSingleResult().toString());
            
          }   
        
        private static String GetNombreEmpleado(int id){
        
              EntityManagerFactory emf = Persistence.createEntityManagerFactory("DB");
              EntityManager em = emf.createEntityManager();
              String select = "SELECT nombreEmpleado FROM Empleados WHERE idEmpleados = '"+ id+ "'";
              Query query = em.createQuery(select);
    
              return query.getSingleResult().toString() ;
            
          }  

        private void CambiarRol(int id, boolean estado){
        
         EntityManagerFactory emf = Persistence.createEntityManagerFactory("DB");
         EntityManager em = emf.createEntityManager();
      
        
             em.getTransaction().begin();
             String select = "UPDATE Usuarios SET admin = "+estado+" WHERE idUsuario = '"+id+"'"; 
             Query query = em.createQuery(select);
             query.executeUpdate();
             em.getTransaction().commit();
             em.close();
            
          }  
    
        
        private static String GetApellidoEmpleado(int id){
        
              EntityManagerFactory emf = Persistence.createEntityManagerFactory("DB");
              EntityManager em = emf.createEntityManager();
              String select = "SELECT apellidoEmpleado FROM Empleados WHERE idEmpleados = '"+ id+ "'";
              Query query = em.createQuery(select);
    
              return query.getSingleResult().toString() ;
            
          }  
        
        
    
        
        private static String GetNombreTipoDocumento(int id){
        
              EntityManagerFactory emf = Persistence.createEntityManagerFactory("DB");
              EntityManager em = emf.createEntityManager();
              String select = "SELECT nombreTipoDocumento FROM TipoDocumento WHERE idTipoDocumento = '"+ id+ "'";
              Query query = em.createQuery(select);
    
              return query.getSingleResult().toString() ;
            
          }  
        
        private static int GetIdTipoDocumento(String Nombre){
        
              EntityManagerFactory emf = Persistence.createEntityManagerFactory("DB");
              EntityManager em = emf.createEntityManager();
              String select = "SELECT idTipoDocumento FROM TipoDocumento WHERE nombreTipoDocumento = '"+ Nombre+ "'";
              Query query = em.createQuery(select);
    
              return Integer.parseInt(query.getSingleResult().toString());
            
          }   
        
        private void GenerarReporte(){
       
        
             Connection con;
             
        try{
            
            Class.forName("com.mysql.jdbc.Driver");
            
        try{
        
        con = DriverManager.getConnection("jdbc:mysql://localhost:3306/Microcosmos?zeroDateTimeBehavior=convertToNull", "root", "12345");
        
        JasperReport report = (JasperReport) JRLoader.loadObject(getClass().getResource("/Reportes/ReporteUsuarios.jasper"));
        
        Map parametros = new HashMap<String, Object>();
        
        parametros.put("Empleado", N.getNombre());
   
        JasperPrint jprint = JasperFillManager.fillReport(report,parametros, con );
        JasperViewer view = new JasperViewer(jprint,false);
        view.setTitle("Reporte Articulos");
        Image icon = new ImageIcon(getClass().getResource("/imagenes/IconoMicrocosmos.png")).getImage();
        view.setIconImage(icon);
        

        final JRViewer viewer = new JRViewer(jprint);
            JRSaveContributor[] contrbs = viewer.getSaveContributors();

            for (JRSaveContributor saveContributor : contrbs)
            {
                if (!(saveContributor instanceof net.sf.jasperreports.view.save.JRSingleSheetXlsSaveContributor
                    || saveContributor instanceof net.sf.jasperreports.view.save.JRPdfSaveContributor))
            viewer.removeSaveContributor(saveContributor);
        }
        view.setContentPane(viewer);
        view.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        view.setVisible(true);
        

        view.show();

      
    }catch(Exception ex){
        
        log.Logs("PantallaUsuario", "Error al generar reporte: " + ex);
          
        }
        }catch(Exception ex){
        
        log.Logs("PantallaUsuario", "Error al generar reporte: " + ex);
          
        }
                
          }
        
        
        private void BotonAdmin(){
            
        if( N.id == 6){
        
        Btn_Admin.setEnabled(true);
        
        }else{
        
        Btn_Admin.setEnabled(false);
        
        }
   
        }
        
        
        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FmrUsuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FmrUsuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FmrUsuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FmrUsuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FmrUsuarios().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Btn_Activar_Desactivar;
    private javax.swing.JButton Btn_Admin;
    private javax.swing.JButton Btn_Añadir;
    private javax.swing.JButton Btn_Editar;
    private javax.swing.JButton Btn_Imprimir;
    private javax.swing.JButton Btn_Limpiar;
    private javax.swing.JButton Btn_Regresar;
    private javax.swing.JTable Tbl_Empleados;
    private javax.swing.JTable Tbl_Usuarios;
    private javax.swing.JTextField Txt_Activo;
    private javax.swing.JPasswordField Txt_ConfirmarContraseña;
    private javax.swing.JPasswordField Txt_Contraseña;
    private javax.swing.JTextField Txt_IdEmpleado;
    private javax.swing.JTextField Txt_IdUsuario;
    private javax.swing.JTextField Txt_NombreUsuario;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
